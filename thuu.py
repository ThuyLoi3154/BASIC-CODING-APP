import re
import tkinter as tk
from tkinter import messagebox, simpledialog

# Dictionary to store scores
scores = {"C√¢u 1": None, "C√¢u 2": None, "C√¢u 3": None}

# Validate password
def validate_password(password):
    if not password.strip():
        return "‚ö†Ô∏è M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
    if " " in password:
        return "‚ö†Ô∏è M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng."
    if not (8 <= len(password) <= 12):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 8 ƒë·∫øn 12 k√Ω t·ª±."
    if not re.search("[a-z]", password):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt th∆∞·ªùng."
    if not re.search("[A-Z]", password):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa."
    if not re.search("[0-9]", password):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë."
    if not re.search("[$#@]", password):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát ($, #, @)."
    if not re.match(r'^[a-zA-Z0-9$#@]+$', password):
        return "‚ö†Ô∏è M·∫≠t kh·∫©u ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá."
    return None

# Question 1: Password validation
def check_password():
    while True:
        input_passwords = password_entry.get().strip()
        if not input_passwords:
            messagebox.showerror("L·ªói", "‚ö†Ô∏è Danh s√°ch m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return

        passwords = input_passwords.split(";")
        valid_passwords = []
        invalid_passwords = []

        for password in passwords:
            error = validate_password(password)
            if error:
                invalid_passwords.append(f"‚ùå '{password}': {error}")
            else:
                valid_passwords.append(f"‚úÖ {password}")

        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, "üìú Danh s√°ch m·∫≠t kh·∫©u h·ª£p l·ªá:\n")
        result_text.insert(tk.END, "\n".join(valid_passwords) if valid_passwords else "Kh√¥ng c√≥ m·∫≠t kh·∫©u h·ª£p l·ªá.")
        if invalid_passwords:
            result_text.insert(tk.END, "\n\n‚ö†Ô∏è Danh s√°ch m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá:\n")
            result_text.insert(tk.END, "\n".join(invalid_passwords))
            messagebox.showwarning("L·ªói", "‚ö†Ô∏è C√≥ m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá, vui l√≤ng s·ª≠a l·∫°i danh s√°ch.")
            return

        messagebox.showinfo("Th√†nh c√¥ng", "‚úÖ T·∫•t c·∫£ m·∫≠t kh·∫©u ƒë·ªÅu h·ª£p l·ªá.")
        return True

# Question 2: Caesar Cipher Encryption
def caesar_cipher_encrypt(message, shift):
    encrypted_message = ""
    for char in message:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            encrypted_message += chr((ord(char) - base + shift) % 26 + base)
        elif char.isdigit():
            base = ord('0')
            encrypted_message += chr((ord(char) - base + shift) % 10 + base)
        elif 32 <= ord(char) <= 126:
            base = 32
            encrypted_message += chr((ord(char) - base + shift) % (126 - 32 + 1) + base)
        else:
            encrypted_message += char
    return encrypted_message

def encrypt_message():
    while True:
        message = cipher_message_entry.get().strip()
        if not message:
            messagebox.showerror("L·ªói", "‚ö†Ô∏è Th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return

        try:
            shift = int(cipher_shift_entry.get())
        except ValueError:
            messagebox.showerror("L·ªói", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá.")
            return

        encrypted_message = caesar_cipher_encrypt(message, shift)
        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, f"üîë Th√¥ng ƒëi·ªáp sau khi m√£ h√≥a: {encrypted_message}")
        messagebox.showinfo("Th√†nh c√¥ng", "‚úÖ Th√¥ng ƒëi·ªáp ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.")
        return True

# Question 3: Calculate an expression
def calculate_expression():
    while True:
        expression = expression_entry.get().strip()
        if not expression:
            messagebox.showerror("L·ªói", "‚ö†Ô∏è Bi·ªÉu th·ª©c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return

        if not re.match(r'^[\d\s+\-*/().]+$', expression):
            messagebox.showerror("L·ªói", "‚ö†Ô∏è Bi·ªÉu th·ª©c ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá.")
            return

        try:
            result = eval(expression)
            result_text.delete(1.0, tk.END)
            result_text.insert(tk.END, f"üßÆ K·∫øt qu·∫£ c·ªßa bi·ªÉu th·ª©c: {result}")
            messagebox.showinfo("Th√†nh c√¥ng", "‚úÖ Bi·ªÉu th·ª©c ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n.")
            return True
        except ZeroDivisionError:
            messagebox.showerror("L·ªói", "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ chia cho 0.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"‚ö†Ô∏è L·ªói: {e}")

# View the final report
def view_report():
    report = "\nüìã K·∫æT QU·∫¢ CH·∫§M ƒêI·ªÇM:\n"
    print(f"M√£ s·ªë sinh vi√™n: 14227371980980")
    print(f"H·ªç v√† t√™n: Tran Loi")
    for question, score in scores.items():
        report += f"- {question}: {score if score is not None else 'Ch∆∞a ch·∫•m'}\n"
    total_score = sum(score for score in scores.values() if score is not None)
    report += f"\nüéØ T·ªïng ƒëi·ªÉm: {total_score}\n"
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, report)

# Grading a specific question
def grade_question(question):
    valid = None
    if question == "C√¢u 1":
        valid = check_password()
    elif question == "C√¢u 2":
        valid = encrypt_message()
    elif question == "C√¢u 3":
        valid = calculate_expression()

    if valid:
        while True:
            try:
                score = simpledialog.askfloat("Nh·∫≠p ƒëi·ªÉm", f"Nh·∫≠p ƒëi·ªÉm cho {question} (0-10):", minvalue=0, maxvalue=10)
                if score is None:
                    messagebox.showerror("L·ªói", "‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p ƒëi·ªÉm ƒë·ªÉ ti·∫øp t·ª•c.")
                else:
                    scores[question] = score
                    messagebox.showinfo("ƒêi·ªÉm", f"‚úÖ B·∫°n ƒë√£ ch·∫•m ƒëi·ªÉm {question}: {score}")
                    break
            except ValueError:
                messagebox.showerror("L·ªói", "‚ö†Ô∏è ƒêi·ªÉm nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

# Tkinter GUI setup
root = tk.Tk()
root.title("·ª®ng d·ª•ng ch·∫•m ƒëi·ªÉm")

# Password check section
password_frame = tk.LabelFrame(root, text="C√¢u 1: Ki·ªÉm tra m·∫≠t kh·∫©u", padx=10, pady=10)
password_frame.pack(fill="both", expand="yes", padx=10, pady=10)
tk.Label(password_frame, text="Nh·∫≠p danh s√°ch m·∫≠t kh·∫©u (ngƒÉn c√°ch b·∫±ng d·∫•u ch·∫•m ph·∫©y):").pack()
password_entry = tk.Entry(password_frame, width=50)
password_entry.pack(pady=5)
tk.Button(password_frame, text="Ki·ªÉm tra m·∫≠t kh·∫©u", command=lambda: grade_question("C√¢u 1")).pack()

# Caesar cipher section
cipher_frame = tk.LabelFrame(root, text="C√¢u 2: M√£ h√≥a th√¥ng ƒëi·ªáp", padx=10, pady=10)
cipher_frame.pack(fill="both", expand="yes", padx=10, pady=10)
tk.Label(cipher_frame, text="Nh·∫≠p th√¥ng ƒëi·ªáp c·∫ßn m√£ h√≥a:").pack()
cipher_message_entry = tk.Entry(cipher_frame, width=50)
cipher_message_entry.pack(pady=5)
tk.Label(cipher_frame, text="Nh·∫≠p ƒë·ªô d·ªãch chuy·ªÉn:").pack()
cipher_shift_entry = tk.Entry(cipher_frame, width=20)
cipher_shift_entry.pack(pady=5)
tk.Button(cipher_frame, text="M√£ h√≥a th√¥ng ƒëi·ªáp", command=lambda: grade_question("C√¢u 2")).pack()

# Expression calculator section
expression_frame = tk.LabelFrame(root, text="C√¢u 3: T√≠nh to√°n bi·ªÉu th·ª©c", padx=10, pady=10)
expression_frame.pack(fill="both", expand="yes", padx=10, pady=10)
tk.Label(expression_frame, text="Nh·∫≠p bi·ªÉu th·ª©c c·∫ßn t√≠nh:").pack()
expression_entry = tk.Entry(expression_frame, width=50)
expression_entry.pack(pady=5)
tk.Button(expression_frame, text="T√≠nh to√°n bi·ªÉu th·ª©c", command=lambda: grade_question("C√¢u 3")).pack()

# Result section
result_frame = tk.LabelFrame(root, text="K·∫øt qu·∫£", padx=10, pady=10)
result_frame.pack(fill="both", expand="yes", padx=10, pady=10)
result_text = tk.Text(result_frame, height=10, width=70)
result_text.pack()

# Report Button
tk.Button(root, text="Xem b√°o c√°o", command=view_report).pack(pady=10)

# Run the GUI
root.mainloop()

